#!/usr/bin/env bash

# Git pre-push hook
# Runs comprehensive checks before allowing a push to remote
# This prevents broken deployments and maintains code quality

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SKIP_HOOK=${SKIP_HOOK:-false}
SKIP_DATA_BUILD=${SKIP_DATA_BUILD:-false}
SKIP_E2E=${SKIP_E2E:-false}

echo -e "${BLUE}🔨 Running pre-push hooks...${NC}"

# Allow skipping hook with environment variable
if [ "$SKIP_HOOK" = "true" ]; then
    echo -e "${YELLOW}⚠️  Pre-push hook skipped via SKIP_HOOK=true${NC}"
    exit 0
fi

# Function to print step headers
print_step() {
    echo -e "\n${BLUE}$1${NC}"
    echo "----------------------------------------"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if we need to rebuild data (new shapefiles)
check_for_new_shapefiles() {
    local changed_files
    changed_files=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || echo "")
    
    if echo "$changed_files" | grep -E "\.(shp|dbf|shx|prj|cpg)$" >/dev/null; then
        return 0  # Found shapefiles
    fi
    
    # Also check if build scripts changed
    if echo "$changed_files" | grep -E "src/data/build-.*\.ts$" >/dev/null; then
        return 0  # Build scripts changed
    fi
    
    return 1  # No shapefiles or build script changes
}

# Step 1: Environment validation
print_step "🔍 1. Environment Validation"

# Check Node.js version
if ! command_exists node; then
    echo -e "${RED}❌ Node.js not found${NC}"
    exit 1
fi

node_version=$(node --version | cut -d'v' -f2)
required_version="18.0.0"
if ! command_exists npx; then
    echo -e "${RED}❌ npm/npx not found${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Node.js ${node_version} found${NC}"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}❌ Not in a git repository${NC}"
    exit 1
fi

# Step 2: Install dependencies
print_step "📦 2. Dependency Check"
if [ ! -d "node_modules" ]; then
    echo "Installing dependencies..."
    npm install
else
    echo -e "${GREEN}✅ Dependencies already installed${NC}"
fi

# Step 3: Linting and formatting
print_step "🧹 3. Code Quality Checks"

echo "Running ESLint..."
if ! npm run lint; then
    echo -e "${RED}❌ ESLint failed. Run 'npm run lint:fix' to auto-fix issues.${NC}"
    exit 1
fi
echo -e "${GREEN}✅ ESLint passed${NC}"

echo "Checking code formatting..."
if ! npx prettier --check 'src/**/*.{ts,tsx,css,scss}' '!src/data/*.json'; then
    echo -e "${RED}❌ Code formatting check failed. Run 'npm run format' to fix.${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Code formatting is correct${NC}"

# Step 4: TypeScript compilation
print_step "🔧 4. TypeScript Compilation"
echo "Checking TypeScript compilation..."
if ! npx tsc --noEmit; then
    echo -e "${RED}❌ TypeScript compilation failed${NC}"
    exit 1
fi
echo -e "${GREEN}✅ TypeScript compilation successful${NC}"

# Step 5: Data builds (if needed)
if [ "$SKIP_DATA_BUILD" != "true" ]; then
    print_step "📊 5. Data Processing Check"
    
    if check_for_new_shapefiles; then
        echo -e "${YELLOW}🔄 New shapefiles or build script changes detected${NC}"
        echo "Running data builds..."
        
        # Check if required data files exist for build
        if [ -f "src/data/saint_louis_city/shapefiles/saint_louis_city.shp" ] || [ -f "src/data/saint_louis_county/shapefiles/saint_louis_county.shp" ]; then
            echo "Building address index..."
            if ! npm run build:address-index; then
                echo -e "${RED}❌ Address index build failed${NC}"
                exit 1
            fi
            
            echo "Building parcel index..."
            if ! npm run build:parcel-index; then
                echo -e "${RED}❌ Parcel index build failed${NC}"
                exit 1
            fi
            
            echo -e "${GREEN}✅ Data builds completed${NC}"
        else
            echo -e "${YELLOW}⚠️  Shapefile changes detected but source files not found. Skipping data build.${NC}"
        fi
    else
        echo -e "${GREEN}✅ No shapefile changes detected, skipping data builds${NC}"
    fi
else
    echo -e "${YELLOW}⚠️  Data builds skipped via SKIP_DATA_BUILD=true${NC}"
fi

# Step 6: Unit tests
print_step "🧪 6. Unit Tests"
echo "Running unit tests..."
if ! npm run test:run; then
    echo -e "${RED}❌ Unit tests failed${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Unit tests passed${NC}"

# Step 7: Build test
print_step "🏗️  7. Production Build Test"
echo "Testing production build..."
if ! npm run build; then
    echo -e "${RED}❌ Production build failed${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Production build successful${NC}"

# Step 8: E2E tests (optional, can be slow)
if [ "$SKIP_E2E" != "true" ]; then
    print_step "🎭 8. End-to-End Tests"
    
    # Check if dev server is already running
    if curl -s http://localhost:3000 > /dev/null; then
        echo "Dev server already running, running E2E tests..."
        if ! npm run test:e2e; then
            echo -e "${RED}❌ E2E tests failed${NC}"
            exit 1
        fi
    else
        echo "Starting dev server and running E2E tests..."
        if ! npm run test:e2e; then
            echo -e "${RED}❌ E2E tests failed${NC}"
            exit 1
        fi
    fi
    echo -e "${GREEN}✅ E2E tests passed${NC}"
else
    echo -e "${YELLOW}⚠️  E2E tests skipped via SKIP_E2E=true${NC}"
fi

# Step 9: Final validation
print_step "🔍 9. Final Validation"

# Check for any uncommitted changes that should be committed
if ! git diff-index --quiet HEAD --; then
    echo -e "${YELLOW}⚠️  You have uncommitted changes. Consider committing them before pushing.${NC}"
    git status --porcelain
fi

echo -e "\n${GREEN}🎉 All pre-push checks passed! Push is allowed.${NC}"
echo -e "${BLUE}📝 Tip: You can skip hooks with SKIP_HOOK=true or SKIP_E2E=true for faster pushes during development.${NC}"

exit 0
